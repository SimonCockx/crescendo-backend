"""
Django settings for crescendobackend project.

Generated by 'django-admin startproject' using Django 3.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""
import os
from configparser import RawConfigParser, NoSectionError, NoOptionError
from typing import List
from django.core.exceptions import ImproperlyConfigured


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
CONFIG_FILE = os.path.join(BASE_DIR, 'config.ini')


config = RawConfigParser()
read_data = config.read(CONFIG_FILE)
if len(read_data) != 1:
    raise ImproperlyConfigured(f'No config file at "{CONFIG_FILE}".')


def read_from_config(section: str, option: str) -> str:
    try:
        return config.get(section, option)
    except NoSectionError as e:
        raise ImproperlyConfigured(f'Invalid config file: no section [{section}].') from e
    except NoOptionError as e:
        raise ImproperlyConfigured(f'Invalid config file: no option "{option}" in section [{section}].') from e


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/


# App TODO: make configurable
ADMINS = [("Simon Cockx", "simon@sikanda.be")]

EMAIL_HOST = 'mail.embeetle.com'
EMAIL_PORT = 587
EMAIL_HOST_USER = 'site@embeetle.com'
EMAIL_HOST_PASSWORD = '([TR9y^g(46('
EMAIL_SUBJECT_PREFIX = '[CRESCENDO] '
SERVER_EMAIL = 'root@crescendo'

AUTH_USER_MODEL = 'core.Role'
AUTHENTICATION_BACKENDS = ['crescendobackend.apps.core.role_authentication.RoleBackend']


# Security
SECRET_KEY = read_from_config('security', 'SECRET_KEY')
ALLOWED_HOSTS: List[str] = read_from_config('security', 'ALLOWED_HOSTS').split(',')
SECURE_SSL_REDIRECT = True
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True


# Application definition
INSTALLED_APPS = [
    'crescendobackend.apps.core',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'crescendobackend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'crescendobackend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

engine = read_from_config('database', 'ENGINE')
if engine == 'sqlite3':
    database = {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, read_from_config('database', 'NAME')),
    }
elif engine == 'postgresql':
    database = {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': read_from_config('database', 'NAME'),
        'USER': read_from_config('database', 'USER'),
        'PASSWORD': read_from_config('database', 'PASSWORD'),
        'HOST': read_from_config('database', 'HOST'),
        'PORT': read_from_config('database', 'PORT'),
    }
else:
    raise ImproperlyConfigured(f'Invalid config file: database engine "{engine}" is not supported.')

DATABASES = {
    'default': database
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = read_from_config('localization', 'LANGUAGE_CODE')

TIME_ZONE = read_from_config('localization', 'TIME_ZONE')

USE_I18N = True

USE_L10N = True

USE_TZ = True
